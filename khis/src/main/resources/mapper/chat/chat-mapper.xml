<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="chat">
  <select id="findChatMemberByMemberId" resultType="chatMember">
  	select
  		*
  	from
  		chat_member
  	where
  		member_id = #{member_id}
  </select>
  
  <insert id="insertChatMember">
  	insert into
  		chat_member(chat_id, member_id)
  	values(
  		#{chatId},
  		#{memberId}
  	)
  </insert>
  
  <insert id="insertChatLog">
  	insert into
  		chat_log(no, chat_id, member_id, msg, log_time)
  	values(
  		seq_chat_log_no.nextval,
  		#{chatId},
  		#{memberId},
  		#{msg},
  		#{logTime}
  	)
  </insert>
  
  <select id="findChatLogByChatId" resultType="chatLog">
  	select
  		*
  	from
  		chat_log
  	where
  		chat_id = #{chat_id}
  	order by
  		log_time asc
  </select>
  
  <select id="findChatLog" resultType="chatLog">
  	select
	    no,
	    chat_id,
	    (select member_id from chat_member where chat_id = CL.chat_id and member_id != 'admin') member_id,
	    msg,
	    log_time,
	    (select count(*) from chat_log where chat_id = CL.chat_id and log_time > (select last_check from chat_member where chat_id = CL.chat_id and member_id = 'admin')) unread_count
	from (
	    select
	        CL.*,
	        row_number() over(partition by chat_id order by no desc) rnum
	    from
	        chat_log CL) CL
	where
	    rnum = 1
	order by
	    log_time desc
  </select>
  
  <update id="updateLastCheck">
  	update
  		chat_member
  	set
  		last_check = #{lastCheck}
  	where
  		chat_id = #{chatId}
  	  and 
  	  	member_id = #{memberId}
  </update>
  
  <select  id="selectTotalChatList" resultType = "_int">
  select count(*) from 
        (select
	    no,
	    chat_id,
	    (select member_id from chat_member where chat_id = CL.chat_id and member_id != 'admin') member_id,
	    msg,
	    log_time,
	    (select count(*) from chat_log where chat_id = CL.chat_id and log_time > (select last_check from chat_member where chat_id = CL.chat_id and member_id = 'admin')) unread_count
	from (
	    select
	        CL.*,
	        row_number() over(partition by chat_id order by no desc) rnum
	    from
	        chat_log CL) CL
	where
	    rnum = 1)
  </select>
  
  
</mapper>